From 610b4cd1d4cc4bd437ec0cdfa8326fe14f96dc5c Mon Sep 17 00:00:00 2001
From: arroway <stephanie@minet.net>
Date: Mon, 3 Oct 2011 15:35:19 +0200
Subject: [PATCH 17/19] add some comments

---
 blk/virtio-blk.c |   13 +++++--------
 virtio.c         |   13 +++++--------
 2 files changed, 10 insertions(+), 16 deletions(-)

diff --git a/blk/virtio-blk.c b/blk/virtio-blk.c
index 7e2b4df..8fdf642 100755
--- a/blk/virtio-blk.c
+++ b/blk/virtio-blk.c
@@ -234,7 +234,6 @@ virtio_blk_execute(struct virtio_blk_softc *sc)
 		return r;
 	}
 
-	// pourquoi vr->nseg + 2 ?
 	r = virtio_enqueue_reserve(vsc, vq, slot, vr->nseg + 2);
 	if (r != 0) {
 		kprintf("Bad enqueue_reserve\n");
@@ -315,6 +314,7 @@ virtio_disk_close(struct dev_close_args *ap)
 	debug("%s\n", __FUNCTION__);
 	return 0;
 }
+
 static int
 virtio_disk_open(struct dev_open_args *ap)
 {
@@ -322,6 +322,7 @@ virtio_disk_open(struct dev_open_args *ap)
 	debug("%s\n", __FUNCTION__);
 	return 0;
 }
+
 static int
 virtio_disk_dump(struct dev_dump_args *ap)
 {
@@ -329,7 +330,6 @@ virtio_disk_dump(struct dev_dump_args *ap)
 	return 1;
 }
 
-
 static void
 virtio_blk_vq_done1(struct virtio_blk_softc *sc, struct virtio_softc *vsc,
 					struct virtqueue *vq, int slot)
@@ -361,7 +361,8 @@ virtio_blk_vq_done1(struct virtio_blk_softc *sc, struct virtio_softc *vsc,
 	biodone(&bp->b_bio_array[1]);
 }
 
-
+/* Interrupt defined in th attach function
+ and called from virtio_vq_intr in (virtio.c) */
 static int
 virtio_blk_vq_done(struct virtqueue *vq)
 {
@@ -527,7 +528,6 @@ virtio_blk_attach(device_t dev)
 	int qsize;
 	struct disk_info info;
 	int error;
-	debug("");
 
 	sc->dev = dev;
 	sc->sc_virtio = vsc;
@@ -538,6 +538,7 @@ virtio_blk_attach(device_t dev)
 	vsc->sc_child = dev;
 	vsc->sc_intrhand = virtio_vq_intr;
 	debug("sc_child is %p\n", vsc->sc_child);
+	
 	features = virtio_negotiate_features(vsc,
 				   (VIRTIO_BLK_F_SIZE_MAX |
 				   VIRTIO_BLK_F_SEG_MAX |
@@ -647,10 +648,6 @@ virtio_blk_detach(device_t dev)
 
 	virtio_free_vq(vsc, &sc->sc_vq[0]);
 
-	/*unload and free virtqueue*/
-	/* bug fix */
-	// freed twice
-	//kfree(vq->vq_entries, M_DEVBUF);
 	bus_dmamap_unload(vq->vq_dmat, vq->vq_dmamap);
 	bus_dmamem_free(vq->vq_dmat, vq->vq_vaddr, vq->vq_dmamap);
 	bus_dma_tag_destroy(vq->vq_dmat);
diff --git a/virtio.c b/virtio.c
index 6b029bc..5b10987 100755
--- a/virtio.c
+++ b/virtio.c
@@ -168,9 +168,6 @@ virtio_reinit_end(struct virtio_softc *sc)
 	virtio_set_status(sc, VIRTIO_CONFIG_DEVICE_STATUS_DRIVER_OK);
 }
 
-
-
-
 /*
  * Start/stop vq interrupt.  There is no guarantee that interrupts will
  * effectively be stopped .
@@ -205,7 +202,6 @@ virtio_init_vq(struct virtio_softc *sc, struct virtqueue *vq)
 	/* build the indirect descriptor chain */
 	if (vq->vq_indirect != NULL) {
 		struct vring_desc *vd;
-		/*foo*/
 		for (i = 0; i < vq_size; i++) {
 			vd = vq->vq_indirect;
 			vd += vq->vq_maxnsegs * i;
@@ -382,8 +378,7 @@ virtio_alloc_vq(struct virtio_softc *sc, struct virtqueue *vq, int index,
 
 	virtio_init_vq(sc, vq);
 
-	//kprintf("allocated %u byte for virtqueue %d for %s, size %d\n",
-	//	allocsize, index, name, vq_size);
+	debug("allocated %u byte for virtqueue %d for %s, size %d\n", allocsize, index, name, vq_size);
 	if (allocsize3 > 0) {
 		kprintf( "using %d byte (%d entries) indirect descriptors\n",
 			 allocsize3, maxnsegs * vq_size);
@@ -457,7 +452,7 @@ vq_sync_descs(struct virtio_softc *sc, struct virtqueue *vq, int ops)
 static void
 vq_free_entry(struct virtqueue *vq, struct vq_entry *qe)
 {
-	//kprintf("call of q_free_entry(): vq_num=%u", vq->vq_num);
+	debug("call of q_free_entry(): vq_num=%u", vq->vq_num);
 	spin_lock(&vq->vq_freelist_lock);
 	TAILQ_INSERT_TAIL(&vq->vq_freelist, qe, qe_list);
 	debug("tailq_insert_tail executed");
@@ -495,7 +490,6 @@ notify:
 		vq_sync_aring(sc, vq, BUS_DMASYNC_PREWRITE);
 		vq_sync_uring(sc, vq, BUS_DMASYNC_PREREAD);
 
-
 		bus_space_barrier(sc->sc_iot, sc->sc_ioh, vq->vq_avail->idx, 2,
 				BUS_SPACE_BARRIER_WRITE);
 
@@ -513,6 +507,8 @@ notify:
 		bus_space_barrier(sc->sc_iot, sc->sc_ioh, vq->vq_used->flags, 2,
 				  BUS_SPACE_BARRIER_READ);
 
+		/*This is the important line that notifies the virtio backend
+		 in qemu and eventually raises an interrupt*/
 		if (!(vq->vq_used->flags & VRING_USED_F_NO_NOTIFY)) {
 
 			bus_space_write_2(sc->sc_iot, sc->sc_ioh,
@@ -957,6 +953,7 @@ virtio_attach(device_t dev)
 
 	}
 
+	/*Attach for virtio network & memory ballooning drivers to come*/
 	if (virtio_type == PCI_PRODUCT_VIRTIO_NETWORK) {
 		child = device_add_child(dev, "virtio_net",0);
 
-- 
1.7.4.4

